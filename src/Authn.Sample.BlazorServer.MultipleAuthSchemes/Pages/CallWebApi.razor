@page "/callwebapi"
@*@attribute [AuthorizeForScopes(ScopeKeySection = "CalledApi:Scopes", AuthenticationScheme = Program.AadOpenIdConnectScheme)]*@
@*@attribute [Authorize(AuthenticationSchemes = Program.AadOpenIdConnectScheme)]*@
@*@attribute [Authorize]*@

@using Microsoft.Identity.Abstractions;
@using Microsoft.Identity.Web
@using System.Security.Claims;

@inject IDownstreamApi downstreamAPI
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<AuthorizeView>
    <Authorized>
        <h1>Call an API</h1>

        <p>This component demonstrates fetching data from a Web API.</p>

        @if (apiResult == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <h2>API Result</h2>
            @apiResult

            <h2>API Result2</h2>
            @apiResult2
        }
    </Authorized>
    <NotAuthorized>
        <FirstLogin></FirstLogin>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private HttpResponseMessage response;
    private string apiResult;
    private string apiResult2;

    private ClaimsPrincipal user;
    private string authScheme;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                try
                {
                    authScheme = user.Claims.FirstOrDefault(c => c.Type == ".AuthScheme").Value;

                    await CallApi();
                    await CallApi2();
                }
                catch (Exception ex)
                {
                    ConsentHandler.HandleException(ex); // Missing option to pass authScheme....
                }
            }
        }
    }

    private async Task CallApi()
    {
        response = await downstreamAPI.CallApiForUserAsync(
            "DownstreamApi1",
            options =>
            {
                options.RelativePath = "";
                options.AcquireTokenOptions.AuthenticationOptionsName = authScheme;
            });

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            apiResult = await response.Content.ReadAsStringAsync();
        }
        else
        {
            apiResult = "Failed to call the web API";
        }
    }

    private async Task CallApi2()
    {
        response = await downstreamAPI.CallApiForUserAsync(
            "DownstreamApi2",
            options =>
            {
                options.RelativePath = "";
                options.AcquireTokenOptions.AuthenticationOptionsName = authScheme;
            });

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            apiResult2 = await response.Content.ReadAsStringAsync();
        }
        else
        {
            apiResult2 = "Failed to call the web API";
        }
    }
}
