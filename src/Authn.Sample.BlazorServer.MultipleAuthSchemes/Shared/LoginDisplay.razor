<AuthorizeView>
    <Authorized>
        Hello, @context.User.Identity?.Name!

        <a href="@logoutUrl">Log out</a>
    </Authorized>
    <NotAuthorized>
        <a href="MicrosoftIdentity/Account/SignIn/@Program.B2cOpenIdConnectScheme">Log in klant</a>
        <a href="MicrosoftIdentity/Account/SignIn/@Program.AadOpenIdConnectScheme">Log in medewerker</a>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string logoutUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await SetLogoutUrl();
    }

    private async Task SetLogoutUrl()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                var scheme = user.Claims.FirstOrDefault(c => c.Type == ".AuthScheme").Value;

                switch (scheme)
                {
                    case Program.B2cOpenIdConnectScheme:
                        logoutUrl = $"/MicrosoftIdentity/Account/SignOut/{Program.B2cOpenIdConnectScheme}";
                        break;
                    case Program.AadOpenIdConnectScheme:
                        logoutUrl = $"/MicrosoftIdentity/Account/SignOut/{Program.AadOpenIdConnectScheme}";
                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(scheme));
                }
            }
        }
    }
}